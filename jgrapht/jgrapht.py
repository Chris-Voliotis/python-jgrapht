# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_jgrapht')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_jgrapht')
    _jgrapht = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_jgrapht', [dirname(__file__)])
        except ImportError:
            import _jgrapht
            return _jgrapht
        try:
            _mod = imp.load_module('_jgrapht', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _jgrapht = swig_import_helper()
    del swig_import_helper
else:
    import _jgrapht
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def jgrapht_thread_create():
    return _jgrapht.jgrapht_thread_create()
jgrapht_thread_create = _jgrapht.jgrapht_thread_create

def jgrapht_thread_destroy():
    return _jgrapht.jgrapht_thread_destroy()
jgrapht_thread_destroy = _jgrapht.jgrapht_thread_destroy

def jgrapht_is_thread_attached():
    return _jgrapht.jgrapht_is_thread_attached()
jgrapht_is_thread_attached = _jgrapht.jgrapht_is_thread_attached

def jgrapht_clustering_exec_k_spanning_tree(arg1, arg2):
    return _jgrapht.jgrapht_clustering_exec_k_spanning_tree(arg1, arg2)
jgrapht_clustering_exec_k_spanning_tree = _jgrapht.jgrapht_clustering_exec_k_spanning_tree

def jgrapht_clustering_get_number_clusters(arg1):
    return _jgrapht.jgrapht_clustering_get_number_clusters(arg1)
jgrapht_clustering_get_number_clusters = _jgrapht.jgrapht_clustering_get_number_clusters

def jgrapht_clustering_ith_cluster_vit(arg1, arg2):
    return _jgrapht.jgrapht_clustering_ith_cluster_vit(arg1, arg2)
jgrapht_clustering_ith_cluster_vit = _jgrapht.jgrapht_clustering_ith_cluster_vit

def jgrapht_coloring_exec_greedy(arg1):
    return _jgrapht.jgrapht_coloring_exec_greedy(arg1)
jgrapht_coloring_exec_greedy = _jgrapht.jgrapht_coloring_exec_greedy

def jgrapht_coloring_exec_greedy_smallestdegreelast(arg1):
    return _jgrapht.jgrapht_coloring_exec_greedy_smallestdegreelast(arg1)
jgrapht_coloring_exec_greedy_smallestdegreelast = _jgrapht.jgrapht_coloring_exec_greedy_smallestdegreelast

def jgrapht_coloring_exec_backtracking_brown(arg1):
    return _jgrapht.jgrapht_coloring_exec_backtracking_brown(arg1)
jgrapht_coloring_exec_backtracking_brown = _jgrapht.jgrapht_coloring_exec_backtracking_brown

def jgrapht_coloring_exec_greedy_largestdegreefirst(arg1):
    return _jgrapht.jgrapht_coloring_exec_greedy_largestdegreefirst(arg1)
jgrapht_coloring_exec_greedy_largestdegreefirst = _jgrapht.jgrapht_coloring_exec_greedy_largestdegreefirst

def jgrapht_coloring_exec_greedy_random(arg1):
    return _jgrapht.jgrapht_coloring_exec_greedy_random(arg1)
jgrapht_coloring_exec_greedy_random = _jgrapht.jgrapht_coloring_exec_greedy_random

def jgrapht_coloring_exec_greedy_random_with_seed(arg1, arg2):
    return _jgrapht.jgrapht_coloring_exec_greedy_random_with_seed(arg1, arg2)
jgrapht_coloring_exec_greedy_random_with_seed = _jgrapht.jgrapht_coloring_exec_greedy_random_with_seed

def jgrapht_coloring_exec_greedy_dsatur(arg1):
    return _jgrapht.jgrapht_coloring_exec_greedy_dsatur(arg1)
jgrapht_coloring_exec_greedy_dsatur = _jgrapht.jgrapht_coloring_exec_greedy_dsatur

def jgrapht_coloring_exec_color_refinement(arg1):
    return _jgrapht.jgrapht_coloring_exec_color_refinement(arg1)
jgrapht_coloring_exec_color_refinement = _jgrapht.jgrapht_coloring_exec_color_refinement

def jgrapht_clear_errno():
    return _jgrapht.jgrapht_clear_errno()
jgrapht_clear_errno = _jgrapht.jgrapht_clear_errno

def jgrapht_get_errno():
    return _jgrapht.jgrapht_get_errno()
jgrapht_get_errno = _jgrapht.jgrapht_get_errno

def jgrapht_get_errno_msg():
    return _jgrapht.jgrapht_get_errno_msg()
jgrapht_get_errno_msg = _jgrapht.jgrapht_get_errno_msg

def jgrapht_generate_barabasi_albert(arg1, arg2, arg3, arg4, arg5):
    return _jgrapht.jgrapht_generate_barabasi_albert(arg1, arg2, arg3, arg4, arg5)
jgrapht_generate_barabasi_albert = _jgrapht.jgrapht_generate_barabasi_albert

def jgrapht_generate_barabasi_albert_forest(arg1, arg2, arg3, arg4):
    return _jgrapht.jgrapht_generate_barabasi_albert_forest(arg1, arg2, arg3, arg4)
jgrapht_generate_barabasi_albert_forest = _jgrapht.jgrapht_generate_barabasi_albert_forest

def jgrapht_generate_complete(arg1, arg2):
    return _jgrapht.jgrapht_generate_complete(arg1, arg2)
jgrapht_generate_complete = _jgrapht.jgrapht_generate_complete

def jgrapht_generate_bipartite_complete(arg1, arg2, arg3):
    return _jgrapht.jgrapht_generate_bipartite_complete(arg1, arg2, arg3)
jgrapht_generate_bipartite_complete = _jgrapht.jgrapht_generate_bipartite_complete

def jgrapht_generate_empty(arg1, arg2):
    return _jgrapht.jgrapht_generate_empty(arg1, arg2)
jgrapht_generate_empty = _jgrapht.jgrapht_generate_empty

def jgrapht_graph_create(arg1, arg2, arg3, arg4):
    return _jgrapht.jgrapht_graph_create(arg1, arg2, arg3, arg4)
jgrapht_graph_create = _jgrapht.jgrapht_graph_create

def jgrapht_graph_vertices_count(arg1):
    return _jgrapht.jgrapht_graph_vertices_count(arg1)
jgrapht_graph_vertices_count = _jgrapht.jgrapht_graph_vertices_count

def jgrapht_graph_edges_count(arg1):
    return _jgrapht.jgrapht_graph_edges_count(arg1)
jgrapht_graph_edges_count = _jgrapht.jgrapht_graph_edges_count

def jgrapht_graph_add_vertex(arg1):
    return _jgrapht.jgrapht_graph_add_vertex(arg1)
jgrapht_graph_add_vertex = _jgrapht.jgrapht_graph_add_vertex

def jgrapht_graph_remove_vertex(arg1, arg2):
    return _jgrapht.jgrapht_graph_remove_vertex(arg1, arg2)
jgrapht_graph_remove_vertex = _jgrapht.jgrapht_graph_remove_vertex

def jgrapht_graph_contains_vertex(arg1, arg2):
    return _jgrapht.jgrapht_graph_contains_vertex(arg1, arg2)
jgrapht_graph_contains_vertex = _jgrapht.jgrapht_graph_contains_vertex

def jgrapht_graph_add_edge(arg1, arg2, arg3):
    return _jgrapht.jgrapht_graph_add_edge(arg1, arg2, arg3)
jgrapht_graph_add_edge = _jgrapht.jgrapht_graph_add_edge

def jgrapht_graph_remove_edge(arg1, arg2):
    return _jgrapht.jgrapht_graph_remove_edge(arg1, arg2)
jgrapht_graph_remove_edge = _jgrapht.jgrapht_graph_remove_edge

def jgrapht_graph_contains_edge(arg1, arg2):
    return _jgrapht.jgrapht_graph_contains_edge(arg1, arg2)
jgrapht_graph_contains_edge = _jgrapht.jgrapht_graph_contains_edge

def jgrapht_graph_contains_edge_between(arg1, arg2, arg3):
    return _jgrapht.jgrapht_graph_contains_edge_between(arg1, arg2, arg3)
jgrapht_graph_contains_edge_between = _jgrapht.jgrapht_graph_contains_edge_between

def jgrapht_graph_degree_of(arg1, arg2):
    return _jgrapht.jgrapht_graph_degree_of(arg1, arg2)
jgrapht_graph_degree_of = _jgrapht.jgrapht_graph_degree_of

def jgrapht_graph_indegree_of(arg1, arg2):
    return _jgrapht.jgrapht_graph_indegree_of(arg1, arg2)
jgrapht_graph_indegree_of = _jgrapht.jgrapht_graph_indegree_of

def jgrapht_graph_outdegree_of(arg1, arg2):
    return _jgrapht.jgrapht_graph_outdegree_of(arg1, arg2)
jgrapht_graph_outdegree_of = _jgrapht.jgrapht_graph_outdegree_of

def jgrapht_graph_edge_source(arg1, arg2):
    return _jgrapht.jgrapht_graph_edge_source(arg1, arg2)
jgrapht_graph_edge_source = _jgrapht.jgrapht_graph_edge_source

def jgrapht_graph_edge_target(arg1, arg2):
    return _jgrapht.jgrapht_graph_edge_target(arg1, arg2)
jgrapht_graph_edge_target = _jgrapht.jgrapht_graph_edge_target

def jgrapht_graph_is_weighted(arg1):
    return _jgrapht.jgrapht_graph_is_weighted(arg1)
jgrapht_graph_is_weighted = _jgrapht.jgrapht_graph_is_weighted

def jgrapht_graph_is_directed(arg1):
    return _jgrapht.jgrapht_graph_is_directed(arg1)
jgrapht_graph_is_directed = _jgrapht.jgrapht_graph_is_directed

def jgrapht_graph_is_undirected(arg1):
    return _jgrapht.jgrapht_graph_is_undirected(arg1)
jgrapht_graph_is_undirected = _jgrapht.jgrapht_graph_is_undirected

def jgrapht_graph_is_allowing_selfloops(arg1):
    return _jgrapht.jgrapht_graph_is_allowing_selfloops(arg1)
jgrapht_graph_is_allowing_selfloops = _jgrapht.jgrapht_graph_is_allowing_selfloops

def jgrapht_graph_is_allowing_multipleedges(arg1):
    return _jgrapht.jgrapht_graph_is_allowing_multipleedges(arg1)
jgrapht_graph_is_allowing_multipleedges = _jgrapht.jgrapht_graph_is_allowing_multipleedges

def jgrapht_graph_get_edge_weight(arg1, arg2):
    return _jgrapht.jgrapht_graph_get_edge_weight(arg1, arg2)
jgrapht_graph_get_edge_weight = _jgrapht.jgrapht_graph_get_edge_weight

def jgrapht_graph_set_edge_weight(arg1, arg2, arg3):
    return _jgrapht.jgrapht_graph_set_edge_weight(arg1, arg2, arg3)
jgrapht_graph_set_edge_weight = _jgrapht.jgrapht_graph_set_edge_weight

def jgrapht_graph_create_all_vit(arg1):
    return _jgrapht.jgrapht_graph_create_all_vit(arg1)
jgrapht_graph_create_all_vit = _jgrapht.jgrapht_graph_create_all_vit

def jgrapht_graph_create_all_eit(arg1):
    return _jgrapht.jgrapht_graph_create_all_eit(arg1)
jgrapht_graph_create_all_eit = _jgrapht.jgrapht_graph_create_all_eit

def jgrapht_graph_create_between_eit(arg1, arg2, arg3):
    return _jgrapht.jgrapht_graph_create_between_eit(arg1, arg2, arg3)
jgrapht_graph_create_between_eit = _jgrapht.jgrapht_graph_create_between_eit

def jgrapht_graph_vertex_create_eit(arg1, arg2):
    return _jgrapht.jgrapht_graph_vertex_create_eit(arg1, arg2)
jgrapht_graph_vertex_create_eit = _jgrapht.jgrapht_graph_vertex_create_eit

def jgrapht_graph_vertex_create_out_eit(arg1, arg2):
    return _jgrapht.jgrapht_graph_vertex_create_out_eit(arg1, arg2)
jgrapht_graph_vertex_create_out_eit = _jgrapht.jgrapht_graph_vertex_create_out_eit

def jgrapht_graph_vertex_create_in_eit(arg1, arg2):
    return _jgrapht.jgrapht_graph_vertex_create_in_eit(arg1, arg2)
jgrapht_graph_vertex_create_in_eit = _jgrapht.jgrapht_graph_vertex_create_in_eit

def jgrapht_graph_as_undirected(arg1):
    return _jgrapht.jgrapht_graph_as_undirected(arg1)
jgrapht_graph_as_undirected = _jgrapht.jgrapht_graph_as_undirected

def jgrapht_graph_as_unmodifiable(arg1):
    return _jgrapht.jgrapht_graph_as_unmodifiable(arg1)
jgrapht_graph_as_unmodifiable = _jgrapht.jgrapht_graph_as_unmodifiable

def jgrapht_graph_as_unweighted(arg1):
    return _jgrapht.jgrapht_graph_as_unweighted(arg1)
jgrapht_graph_as_unweighted = _jgrapht.jgrapht_graph_as_unweighted

def jgrapht_graph_as_edgereversed(arg1):
    return _jgrapht.jgrapht_graph_as_edgereversed(arg1)
jgrapht_graph_as_edgereversed = _jgrapht.jgrapht_graph_as_edgereversed

def jgrapht_graph_test_is_empty(arg1):
    return _jgrapht.jgrapht_graph_test_is_empty(arg1)
jgrapht_graph_test_is_empty = _jgrapht.jgrapht_graph_test_is_empty

def jgrapht_graph_test_is_simple(arg1):
    return _jgrapht.jgrapht_graph_test_is_simple(arg1)
jgrapht_graph_test_is_simple = _jgrapht.jgrapht_graph_test_is_simple

def jgrapht_graph_test_has_selfloops(arg1):
    return _jgrapht.jgrapht_graph_test_has_selfloops(arg1)
jgrapht_graph_test_has_selfloops = _jgrapht.jgrapht_graph_test_has_selfloops

def jgrapht_graph_test_has_multipleedges(arg1):
    return _jgrapht.jgrapht_graph_test_has_multipleedges(arg1)
jgrapht_graph_test_has_multipleedges = _jgrapht.jgrapht_graph_test_has_multipleedges

def jgrapht_graph_test_is_complete(arg1):
    return _jgrapht.jgrapht_graph_test_is_complete(arg1)
jgrapht_graph_test_is_complete = _jgrapht.jgrapht_graph_test_is_complete

def jgrapht_graph_test_is_weakly_connected(arg1):
    return _jgrapht.jgrapht_graph_test_is_weakly_connected(arg1)
jgrapht_graph_test_is_weakly_connected = _jgrapht.jgrapht_graph_test_is_weakly_connected

def jgrapht_graph_test_is_strongly_connected(arg1):
    return _jgrapht.jgrapht_graph_test_is_strongly_connected(arg1)
jgrapht_graph_test_is_strongly_connected = _jgrapht.jgrapht_graph_test_is_strongly_connected

def jgrapht_graph_test_is_tree(arg1):
    return _jgrapht.jgrapht_graph_test_is_tree(arg1)
jgrapht_graph_test_is_tree = _jgrapht.jgrapht_graph_test_is_tree

def jgrapht_graph_test_is_forest(arg1):
    return _jgrapht.jgrapht_graph_test_is_forest(arg1)
jgrapht_graph_test_is_forest = _jgrapht.jgrapht_graph_test_is_forest

def jgrapht_graph_test_is_overfull(arg1):
    return _jgrapht.jgrapht_graph_test_is_overfull(arg1)
jgrapht_graph_test_is_overfull = _jgrapht.jgrapht_graph_test_is_overfull

def jgrapht_graph_test_is_split(arg1):
    return _jgrapht.jgrapht_graph_test_is_split(arg1)
jgrapht_graph_test_is_split = _jgrapht.jgrapht_graph_test_is_split

def jgrapht_graph_test_is_bipartite(arg1):
    return _jgrapht.jgrapht_graph_test_is_bipartite(arg1)
jgrapht_graph_test_is_bipartite = _jgrapht.jgrapht_graph_test_is_bipartite

def jgrapht_graph_test_is_cubic(arg1):
    return _jgrapht.jgrapht_graph_test_is_cubic(arg1)
jgrapht_graph_test_is_cubic = _jgrapht.jgrapht_graph_test_is_cubic

def jgrapht_graph_test_is_eulerian(arg1):
    return _jgrapht.jgrapht_graph_test_is_eulerian(arg1)
jgrapht_graph_test_is_eulerian = _jgrapht.jgrapht_graph_test_is_eulerian

def jgrapht_graph_test_is_chordal(arg1):
    return _jgrapht.jgrapht_graph_test_is_chordal(arg1)
jgrapht_graph_test_is_chordal = _jgrapht.jgrapht_graph_test_is_chordal

def jgrapht_graph_test_is_weakly_chordal(arg1):
    return _jgrapht.jgrapht_graph_test_is_weakly_chordal(arg1)
jgrapht_graph_test_is_weakly_chordal = _jgrapht.jgrapht_graph_test_is_weakly_chordal

def jgrapht_graph_test_has_ore(arg1):
    return _jgrapht.jgrapht_graph_test_has_ore(arg1)
jgrapht_graph_test_has_ore = _jgrapht.jgrapht_graph_test_has_ore

def jgrapht_graph_test_is_trianglefree(arg1):
    return _jgrapht.jgrapht_graph_test_is_trianglefree(arg1)
jgrapht_graph_test_is_trianglefree = _jgrapht.jgrapht_graph_test_is_trianglefree

def jgrapht_graph_test_is_perfect(arg1):
    return _jgrapht.jgrapht_graph_test_is_perfect(arg1)
jgrapht_graph_test_is_perfect = _jgrapht.jgrapht_graph_test_is_perfect

def jgrapht_graph_test_is_planar(arg1):
    return _jgrapht.jgrapht_graph_test_is_planar(arg1)
jgrapht_graph_test_is_planar = _jgrapht.jgrapht_graph_test_is_planar

def jgrapht_graph_test_is_kuratowski_subdivision(arg1):
    return _jgrapht.jgrapht_graph_test_is_kuratowski_subdivision(arg1)
jgrapht_graph_test_is_kuratowski_subdivision = _jgrapht.jgrapht_graph_test_is_kuratowski_subdivision

def jgrapht_graph_test_is_k33_subdivision(arg1):
    return _jgrapht.jgrapht_graph_test_is_k33_subdivision(arg1)
jgrapht_graph_test_is_k33_subdivision = _jgrapht.jgrapht_graph_test_is_k33_subdivision

def jgrapht_graph_test_is_k5_subdivision(arg1):
    return _jgrapht.jgrapht_graph_test_is_k5_subdivision(arg1)
jgrapht_graph_test_is_k5_subdivision = _jgrapht.jgrapht_graph_test_is_k5_subdivision

def jgrapht_it_next_long(arg1):
    return _jgrapht.jgrapht_it_next_long(arg1)
jgrapht_it_next_long = _jgrapht.jgrapht_it_next_long

def jgrapht_it_next_double(arg1):
    return _jgrapht.jgrapht_it_next_double(arg1)
jgrapht_it_next_double = _jgrapht.jgrapht_it_next_double

def jgrapht_it_hasnext(arg1):
    return _jgrapht.jgrapht_it_hasnext(arg1)
jgrapht_it_hasnext = _jgrapht.jgrapht_it_hasnext

def jgrapht_map_create():
    return _jgrapht.jgrapht_map_create()
jgrapht_map_create = _jgrapht.jgrapht_map_create

def jgrapht_map_linked_create():
    return _jgrapht.jgrapht_map_linked_create()
jgrapht_map_linked_create = _jgrapht.jgrapht_map_linked_create

def jgrapht_map_keys_it_create(arg1):
    return _jgrapht.jgrapht_map_keys_it_create(arg1)
jgrapht_map_keys_it_create = _jgrapht.jgrapht_map_keys_it_create

def jgrapht_map_size(arg1):
    return _jgrapht.jgrapht_map_size(arg1)
jgrapht_map_size = _jgrapht.jgrapht_map_size

def jgrapht_map_values_it_create(arg1):
    return _jgrapht.jgrapht_map_values_it_create(arg1)
jgrapht_map_values_it_create = _jgrapht.jgrapht_map_values_it_create

def jgrapht_map_long_double_put(arg1, arg2, arg3):
    return _jgrapht.jgrapht_map_long_double_put(arg1, arg2, arg3)
jgrapht_map_long_double_put = _jgrapht.jgrapht_map_long_double_put

def jgrapht_map_long_long_put(arg1, arg2, arg3):
    return _jgrapht.jgrapht_map_long_long_put(arg1, arg2, arg3)
jgrapht_map_long_long_put = _jgrapht.jgrapht_map_long_long_put

def jgrapht_map_long_double_get(arg1, arg2):
    return _jgrapht.jgrapht_map_long_double_get(arg1, arg2)
jgrapht_map_long_double_get = _jgrapht.jgrapht_map_long_double_get

def jgrapht_map_long_long_get(arg1, arg2):
    return _jgrapht.jgrapht_map_long_long_get(arg1, arg2)
jgrapht_map_long_long_get = _jgrapht.jgrapht_map_long_long_get

def jgrapht_map_long_contains_key(arg1, arg2):
    return _jgrapht.jgrapht_map_long_contains_key(arg1, arg2)
jgrapht_map_long_contains_key = _jgrapht.jgrapht_map_long_contains_key

def jgrapht_map_long_double_remove(arg1, arg2):
    return _jgrapht.jgrapht_map_long_double_remove(arg1, arg2)
jgrapht_map_long_double_remove = _jgrapht.jgrapht_map_long_double_remove

def jgrapht_map_long_long_remove(arg1, arg2):
    return _jgrapht.jgrapht_map_long_long_remove(arg1, arg2)
jgrapht_map_long_long_remove = _jgrapht.jgrapht_map_long_long_remove

def jgrapht_map_clear(arg1):
    return _jgrapht.jgrapht_map_clear(arg1)
jgrapht_map_clear = _jgrapht.jgrapht_map_clear

def jgrapht_matching_exec_greedy_general_max_card(arg1):
    return _jgrapht.jgrapht_matching_exec_greedy_general_max_card(arg1)
jgrapht_matching_exec_greedy_general_max_card = _jgrapht.jgrapht_matching_exec_greedy_general_max_card

def jgrapht_matching_exec_custom_greedy_general_max_card(arg1, arg2):
    return _jgrapht.jgrapht_matching_exec_custom_greedy_general_max_card(arg1, arg2)
jgrapht_matching_exec_custom_greedy_general_max_card = _jgrapht.jgrapht_matching_exec_custom_greedy_general_max_card

def jgrapht_matching_exec_edmonds_general_max_card_dense(arg1):
    return _jgrapht.jgrapht_matching_exec_edmonds_general_max_card_dense(arg1)
jgrapht_matching_exec_edmonds_general_max_card_dense = _jgrapht.jgrapht_matching_exec_edmonds_general_max_card_dense

def jgrapht_matching_exec_edmonds_general_max_card_sparse(arg1):
    return _jgrapht.jgrapht_matching_exec_edmonds_general_max_card_sparse(arg1)
jgrapht_matching_exec_edmonds_general_max_card_sparse = _jgrapht.jgrapht_matching_exec_edmonds_general_max_card_sparse

def jgrapht_matching_exec_greedy_general_max_weight(arg1):
    return _jgrapht.jgrapht_matching_exec_greedy_general_max_weight(arg1)
jgrapht_matching_exec_greedy_general_max_weight = _jgrapht.jgrapht_matching_exec_greedy_general_max_weight

def jgrapht_matching_exec_custom_greedy_general_max_weight(arg1, arg2, arg3):
    return _jgrapht.jgrapht_matching_exec_custom_greedy_general_max_weight(arg1, arg2, arg3)
jgrapht_matching_exec_custom_greedy_general_max_weight = _jgrapht.jgrapht_matching_exec_custom_greedy_general_max_weight

def jgrapht_matching_exec_pathgrowing_max_weight(arg1):
    return _jgrapht.jgrapht_matching_exec_pathgrowing_max_weight(arg1)
jgrapht_matching_exec_pathgrowing_max_weight = _jgrapht.jgrapht_matching_exec_pathgrowing_max_weight

def jgrapht_matching_exec_blossom5_general_max_weight(arg1):
    return _jgrapht.jgrapht_matching_exec_blossom5_general_max_weight(arg1)
jgrapht_matching_exec_blossom5_general_max_weight = _jgrapht.jgrapht_matching_exec_blossom5_general_max_weight

def jgrapht_matching_exec_blossom5_general_min_weight(arg1):
    return _jgrapht.jgrapht_matching_exec_blossom5_general_min_weight(arg1)
jgrapht_matching_exec_blossom5_general_min_weight = _jgrapht.jgrapht_matching_exec_blossom5_general_min_weight

def jgrapht_matching_exec_blossom5_general_perfect_max_weight(arg1):
    return _jgrapht.jgrapht_matching_exec_blossom5_general_perfect_max_weight(arg1)
jgrapht_matching_exec_blossom5_general_perfect_max_weight = _jgrapht.jgrapht_matching_exec_blossom5_general_perfect_max_weight

def jgrapht_matching_exec_blossom5_general_perfect_min_weight(arg1):
    return _jgrapht.jgrapht_matching_exec_blossom5_general_perfect_min_weight(arg1)
jgrapht_matching_exec_blossom5_general_perfect_min_weight = _jgrapht.jgrapht_matching_exec_blossom5_general_perfect_min_weight

def jgrapht_matching_exec_bipartite_max_card(arg1):
    return _jgrapht.jgrapht_matching_exec_bipartite_max_card(arg1)
jgrapht_matching_exec_bipartite_max_card = _jgrapht.jgrapht_matching_exec_bipartite_max_card

def jgrapht_matching_exec_bipartite_perfect_min_weight(arg1, arg2, arg3):
    return _jgrapht.jgrapht_matching_exec_bipartite_perfect_min_weight(arg1, arg2, arg3)
jgrapht_matching_exec_bipartite_perfect_min_weight = _jgrapht.jgrapht_matching_exec_bipartite_perfect_min_weight

def jgrapht_matching_exec_bipartite_max_weight(arg1):
    return _jgrapht.jgrapht_matching_exec_bipartite_max_weight(arg1)
jgrapht_matching_exec_bipartite_max_weight = _jgrapht.jgrapht_matching_exec_bipartite_max_weight

def jgrapht_matching_get_weight(arg1):
    return _jgrapht.jgrapht_matching_get_weight(arg1)
jgrapht_matching_get_weight = _jgrapht.jgrapht_matching_get_weight

def jgrapht_matching_get_card(arg1):
    return _jgrapht.jgrapht_matching_get_card(arg1)
jgrapht_matching_get_card = _jgrapht.jgrapht_matching_get_card

def jgrapht_matching_create_eit(arg1):
    return _jgrapht.jgrapht_matching_create_eit(arg1)
jgrapht_matching_create_eit = _jgrapht.jgrapht_matching_create_eit

def jgrapht_destroy(arg1):
    return _jgrapht.jgrapht_destroy(arg1)
jgrapht_destroy = _jgrapht.jgrapht_destroy

def jgrapht_mst_exec_kruskal(arg1):
    return _jgrapht.jgrapht_mst_exec_kruskal(arg1)
jgrapht_mst_exec_kruskal = _jgrapht.jgrapht_mst_exec_kruskal

def jgrapht_mst_exec_prim(arg1):
    return _jgrapht.jgrapht_mst_exec_prim(arg1)
jgrapht_mst_exec_prim = _jgrapht.jgrapht_mst_exec_prim

def jgrapht_mst_exec_boruvka(arg1):
    return _jgrapht.jgrapht_mst_exec_boruvka(arg1)
jgrapht_mst_exec_boruvka = _jgrapht.jgrapht_mst_exec_boruvka

def jgrapht_mst_get_weight(arg1):
    return _jgrapht.jgrapht_mst_get_weight(arg1)
jgrapht_mst_get_weight = _jgrapht.jgrapht_mst_get_weight

def jgrapht_mst_create_eit(arg1):
    return _jgrapht.jgrapht_mst_create_eit(arg1)
jgrapht_mst_create_eit = _jgrapht.jgrapht_mst_create_eit

def jgrapht_partition_exec_bipartite(arg1):
    return _jgrapht.jgrapht_partition_exec_bipartite(arg1)
jgrapht_partition_exec_bipartite = _jgrapht.jgrapht_partition_exec_bipartite

def jgrapht_scoring_exec_alpha_centrality(arg1):
    return _jgrapht.jgrapht_scoring_exec_alpha_centrality(arg1)
jgrapht_scoring_exec_alpha_centrality = _jgrapht.jgrapht_scoring_exec_alpha_centrality

def jgrapht_scoring_exec_custom_alpha_centrality(arg1, arg2, arg3, arg4, arg5):
    return _jgrapht.jgrapht_scoring_exec_custom_alpha_centrality(arg1, arg2, arg3, arg4, arg5)
jgrapht_scoring_exec_custom_alpha_centrality = _jgrapht.jgrapht_scoring_exec_custom_alpha_centrality

def jgrapht_scoring_exec_betweenness_centrality(arg1):
    return _jgrapht.jgrapht_scoring_exec_betweenness_centrality(arg1)
jgrapht_scoring_exec_betweenness_centrality = _jgrapht.jgrapht_scoring_exec_betweenness_centrality

def jgrapht_scoring_exec_custom_betweenness_centrality(arg1, arg2):
    return _jgrapht.jgrapht_scoring_exec_custom_betweenness_centrality(arg1, arg2)
jgrapht_scoring_exec_custom_betweenness_centrality = _jgrapht.jgrapht_scoring_exec_custom_betweenness_centrality

def jgrapht_scoring_exec_closeness_centrality(arg1):
    return _jgrapht.jgrapht_scoring_exec_closeness_centrality(arg1)
jgrapht_scoring_exec_closeness_centrality = _jgrapht.jgrapht_scoring_exec_closeness_centrality

def jgrapht_scoring_exec_custom_closeness_centrality(arg1, arg2, arg3):
    return _jgrapht.jgrapht_scoring_exec_custom_closeness_centrality(arg1, arg2, arg3)
jgrapht_scoring_exec_custom_closeness_centrality = _jgrapht.jgrapht_scoring_exec_custom_closeness_centrality

def jgrapht_scoring_exec_harmonic_centrality(arg1):
    return _jgrapht.jgrapht_scoring_exec_harmonic_centrality(arg1)
jgrapht_scoring_exec_harmonic_centrality = _jgrapht.jgrapht_scoring_exec_harmonic_centrality

def jgrapht_scoring_exec_custom_harmonic_centrality(arg1, arg2, arg3):
    return _jgrapht.jgrapht_scoring_exec_custom_harmonic_centrality(arg1, arg2, arg3)
jgrapht_scoring_exec_custom_harmonic_centrality = _jgrapht.jgrapht_scoring_exec_custom_harmonic_centrality

def jgrapht_scoring_exec_pagerank(arg1):
    return _jgrapht.jgrapht_scoring_exec_pagerank(arg1)
jgrapht_scoring_exec_pagerank = _jgrapht.jgrapht_scoring_exec_pagerank

def jgrapht_scoring_exec_custom_pagerank(arg1, arg2, arg3, arg4):
    return _jgrapht.jgrapht_scoring_exec_custom_pagerank(arg1, arg2, arg3, arg4)
jgrapht_scoring_exec_custom_pagerank = _jgrapht.jgrapht_scoring_exec_custom_pagerank

def jgrapht_set_create():
    return _jgrapht.jgrapht_set_create()
jgrapht_set_create = _jgrapht.jgrapht_set_create

def jgrapht_set_linked_create():
    return _jgrapht.jgrapht_set_linked_create()
jgrapht_set_linked_create = _jgrapht.jgrapht_set_linked_create

def jgrapht_set_it_create(arg1):
    return _jgrapht.jgrapht_set_it_create(arg1)
jgrapht_set_it_create = _jgrapht.jgrapht_set_it_create

def jgrapht_set_size(arg1):
    return _jgrapht.jgrapht_set_size(arg1)
jgrapht_set_size = _jgrapht.jgrapht_set_size

def jgrapht_set_long_add(arg1, arg2):
    return _jgrapht.jgrapht_set_long_add(arg1, arg2)
jgrapht_set_long_add = _jgrapht.jgrapht_set_long_add

def jgrapht_set_double_add(arg1, arg2):
    return _jgrapht.jgrapht_set_double_add(arg1, arg2)
jgrapht_set_double_add = _jgrapht.jgrapht_set_double_add

def jgrapht_set_long_remove(arg1, arg2):
    return _jgrapht.jgrapht_set_long_remove(arg1, arg2)
jgrapht_set_long_remove = _jgrapht.jgrapht_set_long_remove

def jgrapht_set_double_remove(arg1, arg2):
    return _jgrapht.jgrapht_set_double_remove(arg1, arg2)
jgrapht_set_double_remove = _jgrapht.jgrapht_set_double_remove

def jgrapht_set_long_contains(arg1, arg2):
    return _jgrapht.jgrapht_set_long_contains(arg1, arg2)
jgrapht_set_long_contains = _jgrapht.jgrapht_set_long_contains

def jgrapht_set_double_contains(arg1, arg2):
    return _jgrapht.jgrapht_set_double_contains(arg1, arg2)
jgrapht_set_double_contains = _jgrapht.jgrapht_set_double_contains

def jgrapht_set_clear(arg1):
    return _jgrapht.jgrapht_set_clear(arg1)
jgrapht_set_clear = _jgrapht.jgrapht_set_clear

def jgrapht_vertexcover_exec_greedy(arg1):
    return _jgrapht.jgrapht_vertexcover_exec_greedy(arg1)
jgrapht_vertexcover_exec_greedy = _jgrapht.jgrapht_vertexcover_exec_greedy

def jgrapht_vertexcover_exec_greedy_weighted(arg1, arg2):
    return _jgrapht.jgrapht_vertexcover_exec_greedy_weighted(arg1, arg2)
jgrapht_vertexcover_exec_greedy_weighted = _jgrapht.jgrapht_vertexcover_exec_greedy_weighted

def jgrapht_vertexcover_exec_clarkson(arg1):
    return _jgrapht.jgrapht_vertexcover_exec_clarkson(arg1)
jgrapht_vertexcover_exec_clarkson = _jgrapht.jgrapht_vertexcover_exec_clarkson

def jgrapht_vertexcover_exec_clarkson_weighted(arg1, arg2):
    return _jgrapht.jgrapht_vertexcover_exec_clarkson_weighted(arg1, arg2)
jgrapht_vertexcover_exec_clarkson_weighted = _jgrapht.jgrapht_vertexcover_exec_clarkson_weighted

def jgrapht_vertexcover_exec_edgebased(arg1):
    return _jgrapht.jgrapht_vertexcover_exec_edgebased(arg1)
jgrapht_vertexcover_exec_edgebased = _jgrapht.jgrapht_vertexcover_exec_edgebased

def jgrapht_vertexcover_exec_baryehudaeven(arg1):
    return _jgrapht.jgrapht_vertexcover_exec_baryehudaeven(arg1)
jgrapht_vertexcover_exec_baryehudaeven = _jgrapht.jgrapht_vertexcover_exec_baryehudaeven

def jgrapht_vertexcover_exec_baryehudaeven_weighted(arg1, arg2):
    return _jgrapht.jgrapht_vertexcover_exec_baryehudaeven_weighted(arg1, arg2)
jgrapht_vertexcover_exec_baryehudaeven_weighted = _jgrapht.jgrapht_vertexcover_exec_baryehudaeven_weighted

def jgrapht_vertexcover_exec_exact(arg1):
    return _jgrapht.jgrapht_vertexcover_exec_exact(arg1)
jgrapht_vertexcover_exec_exact = _jgrapht.jgrapht_vertexcover_exec_exact

def jgrapht_vertexcover_exec_exact_weighted(arg1, arg2):
    return _jgrapht.jgrapht_vertexcover_exec_exact_weighted(arg1, arg2)
jgrapht_vertexcover_exec_exact_weighted = _jgrapht.jgrapht_vertexcover_exec_exact_weighted

def jgrapht_vertexcover_get_weight(arg1):
    return _jgrapht.jgrapht_vertexcover_get_weight(arg1)
jgrapht_vertexcover_get_weight = _jgrapht.jgrapht_vertexcover_get_weight

def jgrapht_vertexcover_create_vit(arg1):
    return _jgrapht.jgrapht_vertexcover_create_vit(arg1)
jgrapht_vertexcover_create_vit = _jgrapht.jgrapht_vertexcover_create_vit

def jgrapht_vmLocatorSymbol():
    return _jgrapht.jgrapht_vmLocatorSymbol()
jgrapht_vmLocatorSymbol = _jgrapht.jgrapht_vmLocatorSymbol
# This file is compatible with both classic and new-style classes.


